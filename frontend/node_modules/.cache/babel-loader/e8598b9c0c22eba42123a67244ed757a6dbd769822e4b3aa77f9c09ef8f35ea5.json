{"ast":null,"code":"/*!\r\n * accounting.js v0.4.1\r\n * Copyright 2014 Open Exchange Rates\r\n *\r\n * Freely distributable under the MIT license.\r\n * Portions of accounting.js are inspired or borrowed from underscore.js\r\n *\r\n * Full details and documentation:\r\n * http://openexchangerates.github.io/accounting.js/\r\n */\n\n(function (root, undefined) {\n  /* --- Setup --- */\n\n  // Create the local library object, to be exported or referenced globally later\n  var lib = {};\n\n  // Current version\n  lib.version = '0.4.1';\n\n  /* --- Exposed settings --- */\n\n  // The library's settings configuration object. Contains default parameters for\n  // currency and number formatting\n  lib.settings = {\n    currency: {\n      symbol: \"$\",\n      // default currency symbol is '$'\n      format: \"%s%v\",\n      // controls output: %s = symbol, %v = value (can be object, see docs)\n      decimal: \".\",\n      // decimal point separator\n      thousand: \",\",\n      // thousands separator\n      precision: 2,\n      // decimal places\n      grouping: 3 // digit grouping (not implemented yet)\n    },\n\n    number: {\n      precision: 0,\n      // default precision on numbers is 0\n      grouping: 3,\n      // digit grouping (not implemented yet)\n      thousand: \",\",\n      decimal: \".\"\n    }\n  };\n\n  /* --- Internal Helper Methods --- */\n\n  // Store reference to possibly-available ECMAScript 5 methods for later\n  var nativeMap = Array.prototype.map,\n    nativeIsArray = Array.isArray,\n    toString = Object.prototype.toString;\n\n  /**\r\n   * Tests whether supplied parameter is a string\r\n   * from underscore.js\r\n   */\n  function isString(obj) {\n    return !!(obj === '' || obj && obj.charCodeAt && obj.substr);\n  }\n\n  /**\r\n   * Tests whether supplied parameter is a string\r\n   * from underscore.js, delegates to ECMA5's native Array.isArray\r\n   */\n  function isArray(obj) {\n    return nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n  }\n\n  /**\r\n   * Tests whether supplied parameter is a true object\r\n   */\n  function isObject(obj) {\n    return obj && toString.call(obj) === '[object Object]';\n  }\n\n  /**\r\n   * Extends an object with a defaults object, similar to underscore's _.defaults\r\n   *\r\n   * Used for abstracting parameter handling from API methods\r\n   */\n  function defaults(object, defs) {\n    var key;\n    object = object || {};\n    defs = defs || {};\n    // Iterate over object non-prototype properties:\n    for (key in defs) {\n      if (defs.hasOwnProperty(key)) {\n        // Replace values with defaults only if undefined (allow empty/zero values):\n        if (object[key] == null) object[key] = defs[key];\n      }\n    }\n    return object;\n  }\n\n  /**\r\n   * Implementation of `Array.map()` for iteration loops\r\n   *\r\n   * Returns a new Array as a result of calling `iterator` on each array value.\r\n   * Defers to native Array.map if available\r\n   */\n  function map(obj, iterator, context) {\n    var results = [],\n      i,\n      j;\n    if (!obj) return results;\n\n    // Use native .map method if it exists:\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n    // Fallback for native .map:\n    for (i = 0, j = obj.length; i < j; i++) {\n      results[i] = iterator.call(context, obj[i], i, obj);\n    }\n    return results;\n  }\n\n  /**\r\n   * Check and normalise the value of precision (must be positive integer)\r\n   */\n  function checkPrecision(val, base) {\n    val = Math.round(Math.abs(val));\n    return isNaN(val) ? base : val;\n  }\n\n  /**\r\n   * Parses a format string or object and returns format obj for use in rendering\r\n   *\r\n   * `format` is either a string with the default (positive) format, or object\r\n   * containing `pos` (required), `neg` and `zero` values (or a function returning\r\n   * either a string or object)\r\n   *\r\n   * Either string or format.pos must contain \"%v\" (value) to be valid\r\n   */\n  function checkCurrencyFormat(format) {\n    var defaults = lib.settings.currency.format;\n\n    // Allow function as format parameter (should return string or object):\n    if (typeof format === \"function\") format = format();\n\n    // Format can be a string, in which case `value` (\"%v\") must be present:\n    if (isString(format) && format.match(\"%v\")) {\n      // Create and return positive, negative and zero formats:\n      return {\n        pos: format,\n        neg: format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n        zero: format\n      };\n\n      // If no format, or object is missing valid positive value, use defaults:\n    } else if (!format || !format.pos || !format.pos.match(\"%v\")) {\n      // If defaults is a string, casts it to an object for faster checking next time:\n      return !isString(defaults) ? defaults : lib.settings.currency.format = {\n        pos: defaults,\n        neg: defaults.replace(\"%v\", \"-%v\"),\n        zero: defaults\n      };\n    }\n    // Otherwise, assume format was fine:\n    return format;\n  }\n\n  /* --- API Methods --- */\n\n  /**\r\n   * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\r\n   * Alias: `accounting.parse(string)`\r\n   *\r\n   * Decimal must be included in the regular expression to match floats (defaults to\r\n   * accounting.settings.number.decimal), so if the number uses a non-standard decimal \r\n   * separator, provide it as the second argument.\r\n   *\r\n   * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\r\n   *\r\n   * Doesn't throw any errors (`NaN`s become 0) but this may change in future\r\n   */\n  var unformat = lib.unformat = lib.parse = function (value, decimal) {\n    // Recursively unformat arrays:\n    if (isArray(value)) {\n      return map(value, function (val) {\n        return unformat(val, decimal);\n      });\n    }\n\n    // Fails silently (need decent errors):\n    value = value || 0;\n\n    // Return the value as-is if it's already a number:\n    if (typeof value === \"number\") return value;\n\n    // Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n    decimal = decimal || lib.settings.number.decimal;\n\n    // Build regex to strip out everything except digits, decimal point and minus sign:\n    var regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\n      unformatted = parseFloat((\"\" + value).replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\n      .replace(regex, '') // strip out any cruft\n      .replace(decimal, '.') // make sure decimal point is standard\n      );\n\n    // This will fail silently which may cause trouble, let's wait and see:\n    return !isNaN(unformatted) ? unformatted : 0;\n  };\n\n  /**\r\n   * Implementation of toFixed() that treats floats more like decimals\r\n   *\r\n   * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\r\n   * problems for accounting- and finance-related software.\r\n   */\n  var toFixed = lib.toFixed = function (value, precision) {\n    precision = checkPrecision(precision, lib.settings.number.precision);\n    var power = Math.pow(10, precision);\n\n    // Multiply up by precision, round accurately, then divide and use native toFixed():\n    return (Math.round(lib.unformat(value) * power) / power).toFixed(precision);\n  };\n\n  /**\r\n   * Format a number, with comma-separated thousands and custom precision/decimal places\r\n   * Alias: `accounting.format()`\r\n   *\r\n   * Localise by overriding the precision and thousand / decimal separators\r\n   * 2nd parameter `precision` can be an object matching `settings.number`\r\n   */\n  var formatNumber = lib.formatNumber = lib.format = function (number, precision, thousand, decimal) {\n    // Resursively format arrays:\n    if (isArray(number)) {\n      return map(number, function (val) {\n        return formatNumber(val, precision, thousand, decimal);\n      });\n    }\n\n    // Clean up number:\n    number = unformat(number);\n\n    // Build options object from second param (if object) or all params, extending defaults:\n    var opts = defaults(isObject(precision) ? precision : {\n        precision: precision,\n        thousand: thousand,\n        decimal: decimal\n      }, lib.settings.number),\n      // Clean up precision\n      usePrecision = checkPrecision(opts.precision),\n      // Do some calc:\n      negative = number < 0 ? \"-\" : \"\",\n      base = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\n      mod = base.length > 3 ? base.length % 3 : 0;\n\n    // Format the number:\n    return negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n  };\n\n  /**\r\n   * Format a number into currency\r\n   *\r\n   * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\r\n   * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\r\n   *\r\n   * Localise by overriding the symbol, precision, thousand / decimal separators and format\r\n   * Second param can be an object matching `settings.currency` which is the easiest way.\r\n   *\r\n   * To do: tidy up the parameters\r\n   */\n  var formatMoney = lib.formatMoney = function (number, symbol, precision, thousand, decimal, format) {\n    // Resursively format arrays:\n    if (isArray(number)) {\n      return map(number, function (val) {\n        return formatMoney(val, symbol, precision, thousand, decimal, format);\n      });\n    }\n\n    // Clean up number:\n    number = unformat(number);\n\n    // Build options object from second param (if object) or all params, extending defaults:\n    var opts = defaults(isObject(symbol) ? symbol : {\n        symbol: symbol,\n        precision: precision,\n        thousand: thousand,\n        decimal: decimal,\n        format: format\n      }, lib.settings.currency),\n      // Check format (returns object with pos, neg and zero):\n      formats = checkCurrencyFormat(opts.format),\n      // Choose which format to use for this value:\n      useFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\n\n    // Return with currency symbol added:\n    return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n  };\n\n  /**\r\n   * Format a list of numbers into an accounting column, padding with whitespace\r\n   * to line up currency symbols, thousand separators and decimals places\r\n   *\r\n   * List should be an array of numbers\r\n   * Second parameter can be an object containing keys that match the params\r\n   *\r\n   * Returns array of accouting-formatted number strings of same length\r\n   *\r\n   * NB: `white-space:pre` CSS rule is required on the list container to prevent\r\n   * browsers from collapsing the whitespace in the output strings.\r\n   */\n  lib.formatColumn = function (list, symbol, precision, thousand, decimal, format) {\n    if (!list) return [];\n\n    // Build options object from second param (if object) or all params, extending defaults:\n    var opts = defaults(isObject(symbol) ? symbol : {\n        symbol: symbol,\n        precision: precision,\n        thousand: thousand,\n        decimal: decimal,\n        format: format\n      }, lib.settings.currency),\n      // Check format (returns object with pos, neg and zero), only need pos for now:\n      formats = checkCurrencyFormat(opts.format),\n      // Whether to pad at start of string or after currency symbol:\n      padAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\n      // Store value for the length of the longest string in the column:\n      maxLength = 0,\n      // Format the list according to options, store the length of the longest string:\n      formatted = map(list, function (val, i) {\n        if (isArray(val)) {\n          // Recursively format columns if list is a multi-dimensional array:\n          return lib.formatColumn(val, opts);\n        } else {\n          // Clean up the value\n          val = unformat(val);\n\n          // Choose which format to use for this value (pos, neg or zero):\n          var useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\n            // Format this value, push into formatted list and save the length:\n            fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n          if (fVal.length > maxLength) maxLength = fVal.length;\n          return fVal;\n        }\n      });\n\n    // Pad each number in the list and send back the column of numbers:\n    return map(formatted, function (val, i) {\n      // Only if this is a string (not a nested array, which would have already been padded):\n      if (isString(val) && val.length < maxLength) {\n        // Depending on symbol position, pad after symbol or at index 0:\n        return padAfterSymbol ? val.replace(opts.symbol, opts.symbol + new Array(maxLength - val.length + 1).join(\" \")) : new Array(maxLength - val.length + 1).join(\" \") + val;\n      }\n      return val;\n    });\n  };\n\n  /* --- Module Definition --- */\n\n  // Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\n  // Otherwise, just add `accounting` to the global object\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = lib;\n    }\n    exports.accounting = lib;\n  } else if (typeof define === 'function' && define.amd) {\n    // Return the library as an AMD module:\n    define([], function () {\n      return lib;\n    });\n  } else {\n    // Use accounting.noConflict to restore `accounting` back to its original value.\n    // Returns a reference to the library's `accounting` object;\n    // e.g. `var numbers = accounting.noConflict();`\n    lib.noConflict = function (oldAccounting) {\n      return function () {\n        // Reset the value of the root's `accounting` variable:\n        root.accounting = oldAccounting;\n        // Delete the noConflict method:\n        lib.noConflict = undefined;\n        // Return reference to the library to re-assign it:\n        return lib;\n      };\n    }(root.accounting);\n\n    // Declare `fx` on the root (global/window) object:\n    root['accounting'] = lib;\n  }\n\n  // Root will be `window` in browser or `global` on the server:\n})(this);","map":{"version":3,"names":["root","undefined","lib","version","settings","currency","symbol","format","decimal","thousand","precision","grouping","number","nativeMap","Array","prototype","map","nativeIsArray","isArray","toString","Object","isString","obj","charCodeAt","substr","call","isObject","defaults","object","defs","key","hasOwnProperty","iterator","context","results","i","j","length","checkPrecision","val","base","Math","round","abs","isNaN","checkCurrencyFormat","match","pos","neg","replace","zero","unformat","parse","value","regex","RegExp","unformatted","parseFloat","toFixed","power","pow","formatNumber","opts","usePrecision","negative","parseInt","mod","split","formatMoney","formats","useFormat","formatColumn","list","padAfterSymbol","indexOf","maxLength","formatted","fVal","join","exports","module","accounting","define","amd","noConflict","oldAccounting"],"sources":["D:/Project/riyad/money-tracker-app/frontend/node_modules/accounting/accounting.js"],"sourcesContent":["/*!\r\n * accounting.js v0.4.1\r\n * Copyright 2014 Open Exchange Rates\r\n *\r\n * Freely distributable under the MIT license.\r\n * Portions of accounting.js are inspired or borrowed from underscore.js\r\n *\r\n * Full details and documentation:\r\n * http://openexchangerates.github.io/accounting.js/\r\n */\r\n\r\n(function(root, undefined) {\r\n\r\n\t/* --- Setup --- */\r\n\r\n\t// Create the local library object, to be exported or referenced globally later\r\n\tvar lib = {};\r\n\r\n\t// Current version\r\n\tlib.version = '0.4.1';\r\n\r\n\r\n\t/* --- Exposed settings --- */\r\n\r\n\t// The library's settings configuration object. Contains default parameters for\r\n\t// currency and number formatting\r\n\tlib.settings = {\r\n\t\tcurrency: {\r\n\t\t\tsymbol : \"$\",\t\t// default currency symbol is '$'\r\n\t\t\tformat : \"%s%v\",\t// controls output: %s = symbol, %v = value (can be object, see docs)\r\n\t\t\tdecimal : \".\",\t\t// decimal point separator\r\n\t\t\tthousand : \",\",\t\t// thousands separator\r\n\t\t\tprecision : 2,\t\t// decimal places\r\n\t\t\tgrouping : 3\t\t// digit grouping (not implemented yet)\r\n\t\t},\r\n\t\tnumber: {\r\n\t\t\tprecision : 0,\t\t// default precision on numbers is 0\r\n\t\t\tgrouping : 3,\t\t// digit grouping (not implemented yet)\r\n\t\t\tthousand : \",\",\r\n\t\t\tdecimal : \".\"\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t/* --- Internal Helper Methods --- */\r\n\r\n\t// Store reference to possibly-available ECMAScript 5 methods for later\r\n\tvar nativeMap = Array.prototype.map,\r\n\t\tnativeIsArray = Array.isArray,\r\n\t\ttoString = Object.prototype.toString;\r\n\r\n\t/**\r\n\t * Tests whether supplied parameter is a string\r\n\t * from underscore.js\r\n\t */\r\n\tfunction isString(obj) {\r\n\t\treturn !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether supplied parameter is a string\r\n\t * from underscore.js, delegates to ECMA5's native Array.isArray\r\n\t */\r\n\tfunction isArray(obj) {\r\n\t\treturn nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether supplied parameter is a true object\r\n\t */\r\n\tfunction isObject(obj) {\r\n\t\treturn obj && toString.call(obj) === '[object Object]';\r\n\t}\r\n\r\n\t/**\r\n\t * Extends an object with a defaults object, similar to underscore's _.defaults\r\n\t *\r\n\t * Used for abstracting parameter handling from API methods\r\n\t */\r\n\tfunction defaults(object, defs) {\r\n\t\tvar key;\r\n\t\tobject = object || {};\r\n\t\tdefs = defs || {};\r\n\t\t// Iterate over object non-prototype properties:\r\n\t\tfor (key in defs) {\r\n\t\t\tif (defs.hasOwnProperty(key)) {\r\n\t\t\t\t// Replace values with defaults only if undefined (allow empty/zero values):\r\n\t\t\t\tif (object[key] == null) object[key] = defs[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn object;\r\n\t}\r\n\r\n\t/**\r\n\t * Implementation of `Array.map()` for iteration loops\r\n\t *\r\n\t * Returns a new Array as a result of calling `iterator` on each array value.\r\n\t * Defers to native Array.map if available\r\n\t */\r\n\tfunction map(obj, iterator, context) {\r\n\t\tvar results = [], i, j;\r\n\r\n\t\tif (!obj) return results;\r\n\r\n\t\t// Use native .map method if it exists:\r\n\t\tif (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\r\n\r\n\t\t// Fallback for native .map:\r\n\t\tfor (i = 0, j = obj.length; i < j; i++ ) {\r\n\t\t\tresults[i] = iterator.call(context, obj[i], i, obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\t/**\r\n\t * Check and normalise the value of precision (must be positive integer)\r\n\t */\r\n\tfunction checkPrecision(val, base) {\r\n\t\tval = Math.round(Math.abs(val));\r\n\t\treturn isNaN(val)? base : val;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses a format string or object and returns format obj for use in rendering\r\n\t *\r\n\t * `format` is either a string with the default (positive) format, or object\r\n\t * containing `pos` (required), `neg` and `zero` values (or a function returning\r\n\t * either a string or object)\r\n\t *\r\n\t * Either string or format.pos must contain \"%v\" (value) to be valid\r\n\t */\r\n\tfunction checkCurrencyFormat(format) {\r\n\t\tvar defaults = lib.settings.currency.format;\r\n\r\n\t\t// Allow function as format parameter (should return string or object):\r\n\t\tif ( typeof format === \"function\" ) format = format();\r\n\r\n\t\t// Format can be a string, in which case `value` (\"%v\") must be present:\r\n\t\tif ( isString( format ) && format.match(\"%v\") ) {\r\n\r\n\t\t\t// Create and return positive, negative and zero formats:\r\n\t\t\treturn {\r\n\t\t\t\tpos : format,\r\n\t\t\t\tneg : format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\r\n\t\t\t\tzero : format\r\n\t\t\t};\r\n\r\n\t\t// If no format, or object is missing valid positive value, use defaults:\r\n\t\t} else if ( !format || !format.pos || !format.pos.match(\"%v\") ) {\r\n\r\n\t\t\t// If defaults is a string, casts it to an object for faster checking next time:\r\n\t\t\treturn ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\r\n\t\t\t\tpos : defaults,\r\n\t\t\t\tneg : defaults.replace(\"%v\", \"-%v\"),\r\n\t\t\t\tzero : defaults\r\n\t\t\t};\r\n\r\n\t\t}\r\n\t\t// Otherwise, assume format was fine:\r\n\t\treturn format;\r\n\t}\r\n\r\n\r\n\t/* --- API Methods --- */\r\n\r\n\t/**\r\n\t * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\r\n\t * Alias: `accounting.parse(string)`\r\n\t *\r\n\t * Decimal must be included in the regular expression to match floats (defaults to\r\n\t * accounting.settings.number.decimal), so if the number uses a non-standard decimal \r\n\t * separator, provide it as the second argument.\r\n\t *\r\n\t * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\r\n\t *\r\n\t * Doesn't throw any errors (`NaN`s become 0) but this may change in future\r\n\t */\r\n\tvar unformat = lib.unformat = lib.parse = function(value, decimal) {\r\n\t\t// Recursively unformat arrays:\r\n\t\tif (isArray(value)) {\r\n\t\t\treturn map(value, function(val) {\r\n\t\t\t\treturn unformat(val, decimal);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Fails silently (need decent errors):\r\n\t\tvalue = value || 0;\r\n\r\n\t\t// Return the value as-is if it's already a number:\r\n\t\tif (typeof value === \"number\") return value;\r\n\r\n\t\t// Default decimal point comes from settings, but could be set to eg. \",\" in opts:\r\n\t\tdecimal = decimal || lib.settings.number.decimal;\r\n\r\n\t\t // Build regex to strip out everything except digits, decimal point and minus sign:\r\n\t\tvar regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\r\n\t\t\tunformatted = parseFloat(\r\n\t\t\t\t(\"\" + value)\r\n\t\t\t\t.replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\r\n\t\t\t\t.replace(regex, '')         // strip out any cruft\r\n\t\t\t\t.replace(decimal, '.')      // make sure decimal point is standard\r\n\t\t\t);\r\n\r\n\t\t// This will fail silently which may cause trouble, let's wait and see:\r\n\t\treturn !isNaN(unformatted) ? unformatted : 0;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Implementation of toFixed() that treats floats more like decimals\r\n\t *\r\n\t * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\r\n\t * problems for accounting- and finance-related software.\r\n\t */\r\n\tvar toFixed = lib.toFixed = function(value, precision) {\r\n\t\tprecision = checkPrecision(precision, lib.settings.number.precision);\r\n\t\tvar power = Math.pow(10, precision);\r\n\r\n\t\t// Multiply up by precision, round accurately, then divide and use native toFixed():\r\n\t\treturn (Math.round(lib.unformat(value) * power) / power).toFixed(precision);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Format a number, with comma-separated thousands and custom precision/decimal places\r\n\t * Alias: `accounting.format()`\r\n\t *\r\n\t * Localise by overriding the precision and thousand / decimal separators\r\n\t * 2nd parameter `precision` can be an object matching `settings.number`\r\n\t */\r\n\tvar formatNumber = lib.formatNumber = lib.format = function(number, precision, thousand, decimal) {\r\n\t\t// Resursively format arrays:\r\n\t\tif (isArray(number)) {\r\n\t\t\treturn map(number, function(val) {\r\n\t\t\t\treturn formatNumber(val, precision, thousand, decimal);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Clean up number:\r\n\t\tnumber = unformat(number);\r\n\r\n\t\t// Build options object from second param (if object) or all params, extending defaults:\r\n\t\tvar opts = defaults(\r\n\t\t\t\t(isObject(precision) ? precision : {\r\n\t\t\t\t\tprecision : precision,\r\n\t\t\t\t\tthousand : thousand,\r\n\t\t\t\t\tdecimal : decimal\r\n\t\t\t\t}),\r\n\t\t\t\tlib.settings.number\r\n\t\t\t),\r\n\r\n\t\t\t// Clean up precision\r\n\t\t\tusePrecision = checkPrecision(opts.precision),\r\n\r\n\t\t\t// Do some calc:\r\n\t\t\tnegative = number < 0 ? \"-\" : \"\",\r\n\t\t\tbase = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\r\n\t\t\tmod = base.length > 3 ? base.length % 3 : 0;\r\n\r\n\t\t// Format the number:\r\n\t\treturn negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Format a number into currency\r\n\t *\r\n\t * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\r\n\t * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\r\n\t *\r\n\t * Localise by overriding the symbol, precision, thousand / decimal separators and format\r\n\t * Second param can be an object matching `settings.currency` which is the easiest way.\r\n\t *\r\n\t * To do: tidy up the parameters\r\n\t */\r\n\tvar formatMoney = lib.formatMoney = function(number, symbol, precision, thousand, decimal, format) {\r\n\t\t// Resursively format arrays:\r\n\t\tif (isArray(number)) {\r\n\t\t\treturn map(number, function(val){\r\n\t\t\t\treturn formatMoney(val, symbol, precision, thousand, decimal, format);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Clean up number:\r\n\t\tnumber = unformat(number);\r\n\r\n\t\t// Build options object from second param (if object) or all params, extending defaults:\r\n\t\tvar opts = defaults(\r\n\t\t\t\t(isObject(symbol) ? symbol : {\r\n\t\t\t\t\tsymbol : symbol,\r\n\t\t\t\t\tprecision : precision,\r\n\t\t\t\t\tthousand : thousand,\r\n\t\t\t\t\tdecimal : decimal,\r\n\t\t\t\t\tformat : format\r\n\t\t\t\t}),\r\n\t\t\t\tlib.settings.currency\r\n\t\t\t),\r\n\r\n\t\t\t// Check format (returns object with pos, neg and zero):\r\n\t\t\tformats = checkCurrencyFormat(opts.format),\r\n\r\n\t\t\t// Choose which format to use for this value:\r\n\t\t\tuseFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\r\n\r\n\t\t// Return with currency symbol added:\r\n\t\treturn useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Format a list of numbers into an accounting column, padding with whitespace\r\n\t * to line up currency symbols, thousand separators and decimals places\r\n\t *\r\n\t * List should be an array of numbers\r\n\t * Second parameter can be an object containing keys that match the params\r\n\t *\r\n\t * Returns array of accouting-formatted number strings of same length\r\n\t *\r\n\t * NB: `white-space:pre` CSS rule is required on the list container to prevent\r\n\t * browsers from collapsing the whitespace in the output strings.\r\n\t */\r\n\tlib.formatColumn = function(list, symbol, precision, thousand, decimal, format) {\r\n\t\tif (!list) return [];\r\n\r\n\t\t// Build options object from second param (if object) or all params, extending defaults:\r\n\t\tvar opts = defaults(\r\n\t\t\t\t(isObject(symbol) ? symbol : {\r\n\t\t\t\t\tsymbol : symbol,\r\n\t\t\t\t\tprecision : precision,\r\n\t\t\t\t\tthousand : thousand,\r\n\t\t\t\t\tdecimal : decimal,\r\n\t\t\t\t\tformat : format\r\n\t\t\t\t}),\r\n\t\t\t\tlib.settings.currency\r\n\t\t\t),\r\n\r\n\t\t\t// Check format (returns object with pos, neg and zero), only need pos for now:\r\n\t\t\tformats = checkCurrencyFormat(opts.format),\r\n\r\n\t\t\t// Whether to pad at start of string or after currency symbol:\r\n\t\t\tpadAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\r\n\r\n\t\t\t// Store value for the length of the longest string in the column:\r\n\t\t\tmaxLength = 0,\r\n\r\n\t\t\t// Format the list according to options, store the length of the longest string:\r\n\t\t\tformatted = map(list, function(val, i) {\r\n\t\t\t\tif (isArray(val)) {\r\n\t\t\t\t\t// Recursively format columns if list is a multi-dimensional array:\r\n\t\t\t\t\treturn lib.formatColumn(val, opts);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Clean up the value\r\n\t\t\t\t\tval = unformat(val);\r\n\r\n\t\t\t\t\t// Choose which format to use for this value (pos, neg or zero):\r\n\t\t\t\t\tvar useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\r\n\r\n\t\t\t\t\t\t// Format this value, push into formatted list and save the length:\r\n\t\t\t\t\t\tfVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\r\n\r\n\t\t\t\t\tif (fVal.length > maxLength) maxLength = fVal.length;\r\n\t\t\t\t\treturn fVal;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Pad each number in the list and send back the column of numbers:\r\n\t\treturn map(formatted, function(val, i) {\r\n\t\t\t// Only if this is a string (not a nested array, which would have already been padded):\r\n\t\t\tif (isString(val) && val.length < maxLength) {\r\n\t\t\t\t// Depending on symbol position, pad after symbol or at index 0:\r\n\t\t\t\treturn padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(\" \"))) : (new Array(maxLength - val.length + 1).join(\" \")) + val;\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t});\r\n\t};\r\n\r\n\r\n\t/* --- Module Definition --- */\r\n\r\n\t// Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\r\n\t// Otherwise, just add `accounting` to the global object\r\n\tif (typeof exports !== 'undefined') {\r\n\t\tif (typeof module !== 'undefined' && module.exports) {\r\n\t\t\texports = module.exports = lib;\r\n\t\t}\r\n\t\texports.accounting = lib;\r\n\t} else if (typeof define === 'function' && define.amd) {\r\n\t\t// Return the library as an AMD module:\r\n\t\tdefine([], function() {\r\n\t\t\treturn lib;\r\n\t\t});\r\n\t} else {\r\n\t\t// Use accounting.noConflict to restore `accounting` back to its original value.\r\n\t\t// Returns a reference to the library's `accounting` object;\r\n\t\t// e.g. `var numbers = accounting.noConflict();`\r\n\t\tlib.noConflict = (function(oldAccounting) {\r\n\t\t\treturn function() {\r\n\t\t\t\t// Reset the value of the root's `accounting` variable:\r\n\t\t\t\troot.accounting = oldAccounting;\r\n\t\t\t\t// Delete the noConflict method:\r\n\t\t\t\tlib.noConflict = undefined;\r\n\t\t\t\t// Return reference to the library to re-assign it:\r\n\t\t\t\treturn lib;\r\n\t\t\t};\r\n\t\t})(root.accounting);\r\n\r\n\t\t// Declare `fx` on the root (global/window) object:\r\n\t\troot['accounting'] = lib;\r\n\t}\r\n\r\n\t// Root will be `window` in browser or `global` on the server:\r\n}(this));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}